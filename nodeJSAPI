Below is an example of a simple API using Node.js and MongoDB. We will create an API for managing "users" data, which includes endpoints for listing all users, creating a new user, retrieving a specific user, updating a user, and deleting a user.

Please make sure you have Node.js and MongoDB installed on your system before proceeding.

Step 1: Set Up the Project
Create a new directory for your project, navigate to it, and initialize a new Node.js project:

mkdir nodejs-mongodb-api
cd nodejs-mongodb-api
npm init -y

Step 2: Install Dependencies
Install the required dependencies for the API:

npm install express mongoose body-parser

Step 3: Set Up MongoDB
Make sure you have MongoDB installed and running on your system. The API will connect to a MongoDB database named nodejs_api by default.

Step 4: Create the API
Now, create an index.js file in the project directory and set up the API:

// index.js
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();
const port = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/nodejs_api', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

// Define User Schema and Model
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number,
});

const User = mongoose.model('User', userSchema);

// Parse JSON requests
app.use(bodyParser.json());

// List all users
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Create a new user
app.post('/api/users', async (req, res) => {
  const { name, email, age } = req.body;
  try {
    const user = await User.create({ name, email, age });
    res.status(201).json(user);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Retrieve a specific user
app.get('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await User.findById(userId);
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.json(user);
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Update a user
app.put('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  const { name, email, age } = req.body;
  try {
    const user = await User.findByIdAndUpdate(userId, { name, email, age }, { new: true });
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.json(user);
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Delete a user
app.delete('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await User.findByIdAndDelete(userId);
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.status(204).json();
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

Step 5: Run the API
Start the Node.js server by running the following command:

node index.js


Sure! Below is an example of a simple API using Node.js and MongoDB. We will create an API for managing "users" data, which includes endpoints for listing all users, creating a new user, retrieving a specific user, updating a user, and deleting a user.

Please make sure you have Node.js and MongoDB installed on your system before proceeding.

Step 1: Set Up the Project
Create a new directory for your project, navigate to it, and initialize a new Node.js project:

bash
Copy code
mkdir nodejs-mongodb-api
cd nodejs-mongodb-api
npm init -y
Step 2: Install Dependencies
Install the required dependencies for the API:

bash
Copy code
npm install express mongoose body-parser
Step 3: Set Up MongoDB
Make sure you have MongoDB installed and running on your system. The API will connect to a MongoDB database named nodejs_api by default.

Step 4: Create the API
Now, create an index.js file in the project directory and set up the API:

javascript
Copy code
// index.js
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');

const app = express();
const port = 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/nodejs_api', { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

// Define User Schema and Model
const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  age: Number,
});

const User = mongoose.model('User', userSchema);

// Parse JSON requests
app.use(bodyParser.json());

// List all users
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Create a new user
app.post('/api/users', async (req, res) => {
  const { name, email, age } = req.body;
  try {
    const user = await User.create({ name, email, age });
    res.status(201).json(user);
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Retrieve a specific user
app.get('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await User.findById(userId);
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.json(user);
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Update a user
app.put('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  const { name, email, age } = req.body;
  try {
    const user = await User.findByIdAndUpdate(userId, { name, email, age }, { new: true });
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.json(user);
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Delete a user
app.delete('/api/users/:id', async (req, res) => {
  const userId = req.params.id;
  try {
    const user = await User.findByIdAndDelete(userId);
    if (!user) {
      res.status(404).json({ message: 'User not found' });
    } else {
      res.status(204).json();
    }
  } catch (error) {
    res.status(500).json({ message: 'Internal server error' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});
Step 5: Run the API
Start the Node.js server by running the following command:

bash
Copy code
node index.js
Now, your API is up and running at http://localhost:3000. You can use tools like Postman to test the different endpoints.

With this setup, you have a simple API using Node.js and MongoDB for managing user data. Note that this example does not include authentication, validation, or error handling, which would be essential in a production API. Additionally, consider using environment variables for sensitive information like the MongoDB connection URI in a production setting.

